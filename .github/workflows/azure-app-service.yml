name: Azure App Service CI/CD

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'backend/**'
      - '.github/workflows/azure-app-service.yml'
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main
    paths:
      - 'backend/**'

env:
  NODE_VERSION: '18.x'
  
jobs:
  build_and_test:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    name: Build and Test Job
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
          
      - name: Install dependencies
        run: |
          cd backend
          npm ci
          
      - name: Run linting
        run: |
          cd backend
          npm run lint || true  # Don't fail on lint warnings
          
      - name: Run tests
        run: |
          cd backend
          npm test
          
      - name: Run security audit
        run: |
          cd backend
          npm audit --audit-level=high
        continue-on-error: true
          
      - name: Build application
        run: |
          cd backend
          npm run build || echo "No build script found, skipping..."
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build-${{ github.sha }}
          path: |
            backend/
            !backend/node_modules/
            !backend/.env*
            !backend/logs/
          retention-days: 1

  deploy_staging:
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    needs: build_and_test
    runs-on: ubuntu-latest
    name: Deploy to Staging
    environment: staging
    steps:
      - uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-build-${{ github.sha }}
          path: .
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Deploy to Azure App Service
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME_STAGING }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_STAGING }}
          package: backend
          
      - name: Test deployment
        run: |
          sleep 30  # Wait for deployment to complete
          curl -f ${{ secrets.STAGING_API_URL }}/api/health || exit 1
          
      - name: Notify deployment status
        if: always()
        run: |
          if [ $? -eq 0 ]; then
            echo "✅ Staging deployment successful"
          else
            echo "❌ Staging deployment failed"
            exit 1
          fi

  deploy_production:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: build_and_test
    runs-on: ubuntu-latest
    name: Deploy to Production
    environment: production
    steps:
      - uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-build-${{ github.sha }}
          path: .
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Deploy to Azure App Service
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME_PRODUCTION }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_PRODUCTION }}
          package: backend
          
      - name: Test deployment
        run: |
          sleep 60  # Wait longer for production deployment
          curl -f ${{ secrets.PRODUCTION_API_URL }}/api/health || exit 1
          
      - name: Run smoke tests
        run: |
          # Test key endpoints
          curl -f ${{ secrets.PRODUCTION_API_URL }}/api/health
          curl -f ${{ secrets.PRODUCTION_API_URL }}/api/auth/config
          
      - name: Notify deployment status
        if: always()
        run: |
          if [ $? -eq 0 ]; then
            echo "✅ Production deployment successful"
            echo "🚀 API is live at ${{ secrets.PRODUCTION_API_URL }}"
          else
            echo "❌ Production deployment failed"
            exit 1
          fi

  # Security and code quality checks
  security_scan:
    runs-on: ubuntu-latest
    name: Security Scan
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    steps:
      - uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install dependencies
        run: |
          cd backend
          npm ci
          
      - name: Run security audit
        run: |
          cd backend
          npm audit --audit-level=high
          
      - name: Check for vulnerabilities
        run: |
          cd backend
          npx audit-ci --high
        continue-on-error: true
        
      - name: Run SAST scan
        uses: github/super-linter@v4
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_JAVASCRIPT_ES: true
          VALIDATE_TYPESCRIPT_ES: true
          VALIDATE_JSON: true
          VALIDATE_YAML: true
        continue-on-error: true

  # Performance and load testing (optional)
  performance_test:
    runs-on: ubuntu-latest
    name: Performance Test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: deploy_production
    steps:
      - uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install k6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
          
      - name: Run load tests
        run: |
          # Simple load test script
          cat > loadtest.js << 'EOF'
          import http from 'k6/http';
          import { check, sleep } from 'k6';
          
          export let options = {
            stages: [
              { duration: '30s', target: 10 },
              { duration: '1m', target: 10 },
              { duration: '30s', target: 0 },
            ],
          };
          
          export default function () {
            let response = http.get('${{ secrets.PRODUCTION_API_URL }}/api/health');
            check(response, {
              'status is 200': (r) => r.status === 200,
              'response time < 500ms': (r) => r.timings.duration < 500,
            });
            sleep(1);
          }
          EOF
          
          k6 run loadtest.js
        continue-on-error: true

  # Cleanup old deployments
  cleanup:
    runs-on: ubuntu-latest
    name: Cleanup
    if: always()
    needs: [deploy_staging, deploy_production]
    steps:
      - name: Delete old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const oldArtifacts = artifacts.data.artifacts
              .filter(artifact => artifact.name.startsWith('backend-build-'))
              .filter(artifact => {
                const createdAt = new Date(artifact.created_at);
                const now = new Date();
                const daysDiff = (now - createdAt) / (1000 * 60 * 60 * 24);
                return daysDiff > 7; // Keep artifacts for 7 days
              });
            
            for (const artifact of oldArtifacts) {
              console.log(`Deleting artifact: ${artifact.name}`);
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
              });
            }
